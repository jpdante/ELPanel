using MySql.Data.MySqlClient;using System;using System.Collections.Generic;using System.Reflection;using System.Text;

namespace ELPanel.Manager {
    public class MySqlManager : IDisposable {        private string ConnectString;        public MySqlManager(string connString) {            ConnectString = connString;        }        public MySqlConnection GetMySqlConnection() {            MySqlConnection conn = new MySqlConnection(ConnectString);            conn.Open();            return conn;        }        public bool HasAccountEmail(string email) {            using (MySqlConnection conn = new MySqlConnection(ConnectString)) {                conn.Open();                using (var cmd = new MySqlCommand("SELECT `Email` FROM `accounts` WHERE `Email` = @email;", conn)) {                    cmd.Parameters.AddWithValue("email", email);                    using (MySqlDataReader reader = cmd.ExecuteReader()) {                        return reader.HasRows;                    }                }            }        }        public bool ValidateLoginToken(string token) {            using (MySqlConnection conn = new MySqlConnection(ConnectString)) {                conn.Open();                using (var cmd = new MySqlCommand("SELECT `ID` FROM `accounts` WHERE `Token` = @token;", conn)) {                    cmd.Parameters.AddWithValue("token", token);                    using (MySqlDataReader reader = cmd.ExecuteReader()) {                        return reader.HasRows;                    }                }            }        }        public bool HasAccountEmail(string email, MySqlConnection conn) {            using (var cmd = new MySqlCommand("SELECT `Email` FROM `accounts` WHERE `Email` = @email;", conn)) {                cmd.Parameters.AddWithValue("email", email);                using (MySqlDataReader reader = cmd.ExecuteReader()) {                    return reader.HasRows;                }            }        }        public bool HasAccountUsername(string username, MySqlConnection conn) {            using (var cmd = new MySqlCommand("SELECT `Username` FROM `accounts` WHERE `Username` = @username;", conn)) {                cmd.Parameters.AddWithValue("username", username);                using (MySqlDataReader reader = cmd.ExecuteReader()) {                    return reader.HasRows;                }            }        }        public string GetAccountUUID(string email, MySqlConnection conn) {            using (var cmd = new MySqlCommand("SELECT `UniqueID` FROM `accounts` WHERE `Email` = @email;", conn)) {                cmd.Parameters.AddWithValue("email", email);                using (MySqlDataReader reader = cmd.ExecuteReader()) {                    if (reader.HasRows) {                        if (reader.Read()) {                            return reader.GetString(0);                        }                    }                    return null;                }            }        }        public bool CheckLogin(string email, string password, MySqlConnection conn) {            using (var cmd = new MySqlCommand("SELECT `ID` FROM `accounts` WHERE `Email` = @email AND `Password` = @password;", conn)) {                cmd.Parameters.AddWithValue("email", email);                cmd.Parameters.AddWithValue("password", password);                using (MySqlDataReader reader = cmd.ExecuteReader()) {                    return reader.HasRows;                }            }        }        public int CreateAccount(string uuid, string email, string password, string username, MySqlConnection conn) {            using (var cmd = new MySqlCommand("INSERT INTO `accounts` (`UniqueID`, `Email`, `Password`, `Username`) VALUES (@uuid, @email, @password, @username);", conn)) {                cmd.Parameters.AddWithValue("uuid", uuid);                cmd.Parameters.AddWithValue("email", email);                cmd.Parameters.AddWithValue("password", password);                cmd.Parameters.AddWithValue("username", username);                return cmd.ExecuteNonQuery();            }        }        public int SetLoginToken(string email, string token, MySqlConnection conn) {            using (var cmd = new MySqlCommand("UPDATE `accounts` SET `Token` = @token WHERE `Email` = @email;", conn)) {                cmd.Parameters.AddWithValue("email", email);                cmd.Parameters.AddWithValue("token", token);                return cmd.ExecuteNonQuery();            }        }        public void CloseMySqlConnection(MySqlConnection connection) {            connection.Close();            connection.Dispose();        }

        public ServerInfo[] GetServers(MySqlConnection conn) {
            var serverInfos = new List<ServerInfo>();            using (var cmd = new MySqlCommand("SELECT * FROM `servers`;", conn)) {
				using MySqlDataReader reader = cmd.ExecuteReader();
				serverInfos.Add(new ServerInfo(
					reader.GetInt32(0),
                    reader.GetString(1),
                    reader.GetString(2),
                    reader.GetString(3),
                    reader.GetString(4),
                    reader.GetInt32(5),
                    reader.GetInt32(6)
                ));
			}
            return serverInfos.ToArray();        }		public bool HasSession(string id, MySqlConnection conn) {
            using (var cmd = new MySqlCommand("SELECT id FROM `sessions` WHERE id = @id;", conn)) {
                cmd.Parameters.AddWithValue("id", id);
                using MySqlDataReader reader = cmd.ExecuteReader();
				if(reader.HasRows) {
                    return reader.GetString(0).Equals(id);
				}
            }
            return false;
        }        public void Dispose() {            GC.SuppressFinalize(this);        }    }}